class Solution {
    public static int[] nextGreaterElement(int[] nums1, int[] nums2)
    {   
        HashMap<Integer, Integer> map = new HashMap<>();
        Stack<Integer> stack=new Stack<>();
        int[] p =new int[nums1.length];
        for(int i=nums2.length-1;i>=0;i--){
            if(stack.empty()){
                map.put(nums2[i], -1);
                stack.push(nums2[i]);
            }else if(stack.size()>0 && stack.peek()>nums2[i]){
                map.put(nums2[i], stack.peek());
                stack.push(nums2[i]);
            }else if(stack.peek()<=nums2[i]){
                while(stack.size()>0 && stack.peek()<=nums2[i]){
                    stack.pop();
                }
                if(stack.empty()){
                    map.put(nums2[i], -1);
                }else{
                    map.put(nums2[i], stack.peek());
                }
                stack.push(nums2[i]); 
            }
        }
        int k=0;
        for(int i=0;i<nums1.length;i++){
            if(map.containsKey(nums1[i])){
                p[k++]=map.get(nums1[i]);
            }
        }
        return p;
    } 
}

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] result = new int[nums1.length];
        Stack<Integer> stack=new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();

        for(int num: nums2){            
            while(!stack.isEmpty() && num > stack.peek())
                map.put(stack.pop(), num);
            stack.push(num);            
        }
        
        int i=0;        
        for(int num : nums1)
            result[i++] = map.getOrDefault(num, -1);
        return result;
    }
}


