https://leetcode.com/problems/search-a-2d-matrix-ii/


Solution 1: 0(n*m) - Linear Search
Solution 2: 0(n+m) - In worst case scenario if element is present at lower corner of the matrix it takes row length(m) and column length(n) to search
Solution 3: 0(n*log m) - Binary Search approach


public boolean searchMatrix(int[][] matrix, int target) {
        int n =matrix.length;
        int m = matrix[0].length;
        
        for(int i = 0 ; i< n ; i++)
        {
            int left = 0;
            int right = m-1;
            
            while(left<=right)
            {
                int mid  = left + (right-left)/2;
                if(matrix[i][mid] == target)return true;
                else if(matrix[i][mid] < target)left = mid+1;
                else right = mid - 1;
            }
        }
      
        return false;
    }
